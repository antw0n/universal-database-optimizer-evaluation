-- Although it works, it is a very inefficient solution in terms of memory. Observe
-- how lineitems is being included twice; first inside the unnested orders and second
-- when unnesting lineitems itself
\c {{ variables['psql_db_name'] }}

{% if explain -%}
explain analyze select
{% else %}
select
{% endif %}
	ol.o->>'o_orderkey' as orderkey,
       	sum(cast(ol.l->>'l_extendedprice' as decimal) * (1 - cast(ol.l->>'l_discount' as decimal))) as revenue,
       	ol.o->>'o_orderdate' as orderdate,
	ol.o->>'o_shippriority' as shippriority
from
	(select
	       jsonb_array_elements(j.customers->'c_orders') o,
	       jsonb_array_elements(jsonb_array_elements(j.customers->'c_orders')->'o_lineitems') l
	from {{ variables['psql_db_schema'] }}.json_data j
	where
	       j.customers->>'c_mktsegment' = '{{ variables['tpch']['q3']['c_mktsegment'] }}') ol
where
	cast(ol.o->>'o_orderdate' as date) < date '{{ variables['tpch']['q3']['date'] }}'
	and cast(ol.l->>'l_shipdate' as date) > date '{{ variables['tpch']['q3']['date'] }}'
group by
      orderkey,
      orderdate,
      shippriority
order by
      revenue desc,
      orderdate
limit 10;
